{
	"info": {
		"_postman_id": "8811b3e0-839b-4ea6-ba29-ea12d896efb6",
		"name": "Creating an Event",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27287809",
		"_collection_link": "https://red-comet-4747.postman.co/workspace/Event-Manager-API~a14c436a-9ccc-49fa-a603-7e86c418f772/collection/27287809-8811b3e0-839b-4ea6-ba29-ea12d896efb6?action=share&source=collection_link&creator=27287809"
	},
	"item": [
		{
			"name": "Creating an Event Successfully",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"First Event\",\n    \"description\": \"Event for something\",\n    \"startDate\": \"2024-01-28T12:00:00Z\",\n    \"endDate\": \"2024-01-28T15:00:00Z\",\n    \"seats\": 2\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/events/createEvent",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"events",
						"createEvent"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body.\n\nIn this exmaple we have a successful api call where we created an event with: **titlel, description, start/end date** and number of available **seats**.\n\nIn addition, the response body shows us how many participants are registered to this event. At the moment this number is zero."
			},
			"response": []
		},
		{
			"name": "Creating an Event Unsuccessfully",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"First Event U\",\r\n    \"description\": \"Event for something\",\r\n    \"startDate\": \"2024-01-28T12:00:00Z\",\r\n    \"seats\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/events/createEvent",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"events",
						"createEvent"
					]
				},
				"description": "This api call returns a 400 Bad Request Error and in the body section we recognize that there are missing fields in the input part."
			},
			"response": []
		},
		{
			"name": "Fetch Event",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\r\n{}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/events//getEvent/3",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"events",
						"",
						"getEvent",
						"3"
					]
				},
				"description": "This is an api call that fetches one single event by id"
			},
			"response": []
		},
		{
			"name": "Fetch All Events",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/events//getAllEvents",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"events",
						"",
						"getAllEvents"
					]
				},
				"description": "This is an api call that fetches all Events"
			},
			"response": []
		},
		{
			"name": "Registering an participant successfully",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"fullName\": \"Enis Bajrami\",\r\n   \"email\": \"enis@email.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/events/registerParticipants/3/register",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"events",
						"registerParticipants",
						"3",
						"register"
					]
				},
				"description": "This is an sucessfull api call for registering an participantI\n\nIn the uri we specify the route with the id of the event that the user wants to apply for.  \nex: localhost:3000/events/registerParticipants/**3**/registerEndFragment"
			},
			"response": []
		},
		{
			"name": "Unsuccessful registration of user",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"fullName\": \"Enis Bajrami\",\r\n   \"email\": \"enis@email.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/events/registerParticipants/3/register",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"events",
						"registerParticipants",
						"3",
						"register"
					]
				},
				"description": "Here we have an unsuccessful regisgtration of a user and in the response body we see that there is no more number of seats available.\n\nex: \"error\": \"No more seats available\"EndFragment"
			},
			"response": []
		},
		{
			"name": "Update event Successfully",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Event title has been updated\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/events/updateEvent/3",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"events",
						"updateEvent",
						"3"
					]
				},
				"description": "This api call allows us to update an Event by using its id in the uri.\n\nin the response body we get an message to inform us that there has been an update alo we show the newly updated event."
			},
			"response": []
		},
		{
			"name": "Delete Expired Events",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:3000/events/deleteExpiredEvents",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"events",
						"deleteExpiredEvents"
					]
				},
				"description": "By making this API call we **delete all the expired events**"
			},
			"response": []
		},
		{
			"name": "Delete one event Successfully",
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/events/deleteEvent/3",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"events",
						"deleteEvent",
						"3"
					]
				},
				"description": "This is an api call where we successfully deleted an event"
			},
			"response": []
		},
		{
			"name": "Delete one event Successfully Copy",
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/events/deleteAllEvents",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"events",
						"deleteAllEvents"
					]
				},
				"description": "This is an api call where we successfully **deleted all events**"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}